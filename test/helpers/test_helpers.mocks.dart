// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_stacked_testcases_example/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:ui' as _i11;

import 'package:dio/dio.dart' as _i7;
import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i14;
import 'package:dio/src/dio_mixin.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:flutter/foundation.dart' as _i12;
import 'package:flutter/material.dart' as _i10;
import 'package:flutter_stacked_testcases_example/api_client/api_client_xyz.dart'
    as _i8;
import 'package:flutter_stacked_testcases_example/sign_in/models/auth_data_model.dart'
    as _i15;
import 'package:flutter_stacked_testcases_example/sign_in/models/sign_in_req_model.dart'
    as _i16;
import 'package:flutter_stacked_testcases_example/sign_in/view_model/repository/sign_in_repo.dart'
    as _i9;
import 'package:flutter_stacked_testcases_example/sign_in/view_model/usecases/sign_in_usecase.dart'
    as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseOptions_0 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_1 extends _i1.SmartFake
    implements _i3.HttpClientAdapter {
  _FakeHttpClientAdapter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_2 extends _i1.SmartFake implements _i4.Transformer {
  _FakeTransformer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_3 extends _i1.SmartFake implements _i5.Interceptors {
  _FakeInterceptors_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4<T1> extends _i1.SmartFake implements _i6.Response<T1> {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_5 extends _i1.SmartFake implements _i7.Dio {
  _FakeDio_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptorState_6<T> extends _i1.SmartFake
    implements _i5.InterceptorState<T> {
  _FakeInterceptorState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiClientDigitalHire_7 extends _i1.SmartFake
    implements _i8.ApiClientXYZ {
  _FakeApiClientDigitalHire_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignInRepo_8 extends _i1.SmartFake implements _i9.SignInRepo {
  _FakeSignInRepo_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextSelection_9 extends _i1.SmartFake implements _i10.TextSelection {
  _FakeTextSelection_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingValue_10 extends _i1.SmartFake
    implements _i10.TextEditingValue {
  _FakeTextEditingValue_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextSpan_11 extends _i1.SmartFake implements _i10.TextSpan {
  _FakeTextSpan_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeSize_12 extends _i1.SmartFake implements _i11.Size {
  _FakeSize_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_13 extends _i1.SmartFake implements _i11.Offset {
  _FakeOffset_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRect_14 extends _i1.SmartFake implements _i11.Rect {
  _FakeRect_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusAttachment_15 extends _i1.SmartFake
    implements _i10.FocusAttachment {
  _FakeFocusAttachment_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiagnosticsNode_16 extends _i1.SmartFake
    implements _i10.DiagnosticsNode {
  _FakeDiagnosticsNode_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i12.TextTreeConfiguration? parentConfiguration,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i7.Dio {
  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);
  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i3.HttpClientAdapter);
  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i5.Interceptors);
  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i13.Future<_i6.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> getUri<T>(
    Uri? uri, {
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> postUri<T>(
    Uri? uri, {
    dynamic data,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> putUri<T>(
    Uri? uri, {
    dynamic data,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> head<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> headUri<T>(
    Uri? uri, {
    dynamic data,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> delete<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> deleteUri<T>(
    Uri? uri, {
    dynamic data,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> patch<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> patchUri<T>(
    Uri? uri, {
    dynamic data,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  void lock() => super.noSuchMethod(
        Invocation.method(
          #lock,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void unlock() => super.noSuchMethod(
        Invocation.method(
          #unlock,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i13.Future<_i6.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i14.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    dynamic data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i13.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<dynamic>>);
  @override
  _i13.Future<_i6.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i14.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    dynamic data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i13.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<dynamic>>);
  @override
  _i13.Future<_i6.Response<T>> request<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i14.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> requestUri<T>(
    Uri? uri, {
    dynamic data,
    _i14.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
  @override
  _i13.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i13.Future<_i6.Response<T>>);
}

/// A class which mocks [ApiClientDigitalHire].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClientDigitalHire extends _i1.Mock implements _i8.ApiClientXYZ {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  int get defaultConnectTimeout => (super.noSuchMethod(
        Invocation.getter(#defaultConnectTimeout),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get defaultReceiveTimeout => (super.noSuchMethod(
        Invocation.getter(#defaultReceiveTimeout),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i7.Dio get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeDio_5(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeDio_5(
          this,
          Invocation.getter(#client),
        ),
      ) as _i7.Dio);
  @override
  _i13.Future<T?> delete<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
        returnValueForMissingStub: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  _i13.Future<T?> get<T>(
    String? endpoint, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
        returnValueForMissingStub: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  _i13.Future<T?> post<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i14.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
        returnValueForMissingStub: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  void initialise() => super.noSuchMethod(
        Invocation.method(
          #initialise,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ResponseInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseInterceptorHandler extends _i1.Mock
    implements _i5.ResponseInterceptorHandler {
  @override
  _i13.Future<_i5.InterceptorState<dynamic>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i13.Future<_i5.InterceptorState<dynamic>>.value(
            _FakeInterceptorState_6<dynamic>(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i13.Future<_i5.InterceptorState<dynamic>>.value(
                _FakeInterceptorState_6<dynamic>(
          this,
          Invocation.getter(#future),
        )),
      ) as _i13.Future<_i5.InterceptorState<dynamic>>);
  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void next(_i6.Response<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #next,
          [response],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resolve(_i6.Response<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #resolve,
          [response],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void reject(
    _i7.DioError? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #reject,
          [
            error,
            callFollowingErrorInterceptor,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SignInRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInRepo extends _i1.Mock implements _i9.SignInRepo {
  @override
  _i8.ApiClientXYZ get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeApiClientDigitalHire_7(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeApiClientDigitalHire_7(
          this,
          Invocation.getter(#client),
        ),
      ) as _i8.ApiClientXYZ);
  @override
  _i13.Future<_i15.AuthData?> signIn(
          _i16.SignInRequestModel? signInRequestModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [signInRequestModel],
        ),
        returnValue: _i13.Future<_i15.AuthData?>.value(),
        returnValueForMissingStub: _i13.Future<_i15.AuthData?>.value(),
      ) as _i13.Future<_i15.AuthData?>);
}

/// A class which mocks [SignInUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUsecase extends _i1.Mock implements _i17.SignInUsecase {
  @override
  _i9.SignInRepo get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeSignInRepo_8(
          this,
          Invocation.getter(#repo),
        ),
        returnValueForMissingStub: _FakeSignInRepo_8(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i9.SignInRepo);
  @override
  set repo(_i9.SignInRepo? _repo) => super.noSuchMethod(
        Invocation.setter(
          #repo,
          _repo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i13.Future<_i15.AuthData?> call(
          _i16.SignInRequestModel? signInRequestModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [signInRequestModel],
        ),
        returnValue: _i13.Future<_i15.AuthData?>.value(),
        returnValueForMissingStub: _i13.Future<_i15.AuthData?>.value(),
      ) as _i13.Future<_i15.AuthData?>);
}

/// A class which mocks [TextEditingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextEditingController extends _i1.Mock
    implements _i10.TextEditingController {
  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set text(String? newText) => super.noSuchMethod(
        Invocation.setter(
          #text,
          newText,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set value(_i10.TextEditingValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.TextSelection get selection => (super.noSuchMethod(
        Invocation.getter(#selection),
        returnValue: _FakeTextSelection_9(
          this,
          Invocation.getter(#selection),
        ),
        returnValueForMissingStub: _FakeTextSelection_9(
          this,
          Invocation.getter(#selection),
        ),
      ) as _i10.TextSelection);
  @override
  set selection(_i10.TextSelection? newSelection) => super.noSuchMethod(
        Invocation.setter(
          #selection,
          newSelection,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.TextEditingValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeTextEditingValue_10(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakeTextEditingValue_10(
          this,
          Invocation.getter(#value),
        ),
      ) as _i10.TextEditingValue);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i10.TextSpan buildTextSpan({
    required _i10.BuildContext? context,
    _i10.TextStyle? style,
    required bool? withComposing,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildTextSpan,
          [],
          {
            #context: context,
            #style: style,
            #withComposing: withComposing,
          },
        ),
        returnValue: _FakeTextSpan_11(
          this,
          Invocation.method(
            #buildTextSpan,
            [],
            {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTextSpan_11(
          this,
          Invocation.method(
            #buildTextSpan,
            [],
            {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            },
          ),
        ),
      ) as _i10.TextSpan);
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearComposing() => super.noSuchMethod(
        Invocation.method(
          #clearComposing,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelectionWithinTextBounds(_i10.TextSelection? selection) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSelectionWithinTextBounds,
          [selection],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FocusNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusNode extends _i1.Mock implements _i10.FocusNode {
  @override
  set onKey(_i10.FocusOnKeyCallback? _onKey) => super.noSuchMethod(
        Invocation.setter(
          #onKey,
          _onKey,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onKeyEvent(_i10.FocusOnKeyEventCallback? _onKeyEvent) =>
      super.noSuchMethod(
        Invocation.setter(
          #onKeyEvent,
          _onKeyEvent,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get skipTraversal => (super.noSuchMethod(
        Invocation.getter(#skipTraversal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set skipTraversal(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #skipTraversal,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get canRequestFocus => (super.noSuchMethod(
        Invocation.getter(#canRequestFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set canRequestFocus(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #canRequestFocus,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get descendantsAreFocusable => (super.noSuchMethod(
        Invocation.getter(#descendantsAreFocusable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set descendantsAreFocusable(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #descendantsAreFocusable,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get descendantsAreTraversable => (super.noSuchMethod(
        Invocation.getter(#descendantsAreTraversable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set descendantsAreTraversable(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #descendantsAreTraversable,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i10.FocusNode> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i10.FocusNode>[],
        returnValueForMissingStub: <_i10.FocusNode>[],
      ) as Iterable<_i10.FocusNode>);
  @override
  Iterable<_i10.FocusNode> get traversalChildren => (super.noSuchMethod(
        Invocation.getter(#traversalChildren),
        returnValue: <_i10.FocusNode>[],
        returnValueForMissingStub: <_i10.FocusNode>[],
      ) as Iterable<_i10.FocusNode>);
  @override
  set debugLabel(String? value) => super.noSuchMethod(
        Invocation.setter(
          #debugLabel,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i10.FocusNode> get descendants => (super.noSuchMethod(
        Invocation.getter(#descendants),
        returnValue: <_i10.FocusNode>[],
        returnValueForMissingStub: <_i10.FocusNode>[],
      ) as Iterable<_i10.FocusNode>);
  @override
  Iterable<_i10.FocusNode> get traversalDescendants => (super.noSuchMethod(
        Invocation.getter(#traversalDescendants),
        returnValue: <_i10.FocusNode>[],
        returnValueForMissingStub: <_i10.FocusNode>[],
      ) as Iterable<_i10.FocusNode>);
  @override
  Iterable<_i10.FocusNode> get ancestors => (super.noSuchMethod(
        Invocation.getter(#ancestors),
        returnValue: <_i10.FocusNode>[],
        returnValueForMissingStub: <_i10.FocusNode>[],
      ) as Iterable<_i10.FocusNode>);
  @override
  bool get hasFocus => (super.noSuchMethod(
        Invocation.getter(#hasFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasPrimaryFocus => (super.noSuchMethod(
        Invocation.getter(#hasPrimaryFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i10.FocusHighlightMode get highlightMode => (super.noSuchMethod(
        Invocation.getter(#highlightMode),
        returnValue: _i10.FocusHighlightMode.touch,
        returnValueForMissingStub: _i10.FocusHighlightMode.touch,
      ) as _i10.FocusHighlightMode);
  @override
  _i11.Size get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeSize_12(
          this,
          Invocation.getter(#size),
        ),
        returnValueForMissingStub: _FakeSize_12(
          this,
          Invocation.getter(#size),
        ),
      ) as _i11.Size);
  @override
  _i11.Offset get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: _FakeOffset_13(
          this,
          Invocation.getter(#offset),
        ),
        returnValueForMissingStub: _FakeOffset_13(
          this,
          Invocation.getter(#offset),
        ),
      ) as _i11.Offset);
  @override
  _i11.Rect get rect => (super.noSuchMethod(
        Invocation.getter(#rect),
        returnValue: _FakeRect_14(
          this,
          Invocation.getter(#rect),
        ),
        returnValueForMissingStub: _FakeRect_14(
          this,
          Invocation.getter(#rect),
        ),
      ) as _i11.Rect);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void unfocus(
          {_i10.UnfocusDisposition? disposition =
              _i10.UnfocusDisposition.scope}) =>
      super.noSuchMethod(
        Invocation.method(
          #unfocus,
          [],
          {#disposition: disposition},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool consumeKeyboardToken() => (super.noSuchMethod(
        Invocation.method(
          #consumeKeyboardToken,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i10.FocusAttachment attach(
    _i10.BuildContext? context, {
    _i10.FocusOnKeyEventCallback? onKeyEvent,
    _i10.FocusOnKeyCallback? onKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #attach,
          [context],
          {
            #onKeyEvent: onKeyEvent,
            #onKey: onKey,
          },
        ),
        returnValue: _FakeFocusAttachment_15(
          this,
          Invocation.method(
            #attach,
            [context],
            {
              #onKeyEvent: onKeyEvent,
              #onKey: onKey,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusAttachment_15(
          this,
          Invocation.method(
            #attach,
            [context],
            {
              #onKeyEvent: onKeyEvent,
              #onKey: onKey,
            },
          ),
        ),
      ) as _i10.FocusAttachment);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void requestFocus([_i10.FocusNode? node]) => super.noSuchMethod(
        Invocation.method(
          #requestFocus,
          [node],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool nextFocus() => (super.noSuchMethod(
        Invocation.method(
          #nextFocus,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool previousFocus() => (super.noSuchMethod(
        Invocation.method(
          #previousFocus,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool focusInDirection(_i10.TraversalDirection? direction) =>
      (super.noSuchMethod(
        Invocation.method(
          #focusInDirection,
          [direction],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void debugFillProperties(_i12.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i10.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i10.DiagnosticsNode>[],
        returnValueForMissingStub: <_i10.DiagnosticsNode>[],
      ) as List<_i10.DiagnosticsNode>);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i10.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i12.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_16(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_16(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i10.DiagnosticsNode);
  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i18.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i10.GlobalKey<_i10.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i10.GlobalKey<_i10.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i18.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i13.Future<T?>? navigateWithTransition<T>(
    _i10.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i10.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i18.Transition? transitionClass,
    _i18.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? replaceWithTransition<T>(
    _i10.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i10.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i18.Transition? transitionClass,
    _i18.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void popUntil(
    _i10.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i13.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i10.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? navigateToView<T>(
    _i10.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i10.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i18.Transition? transition,
    _i18.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i10.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? clearStackAndShowView<T>(
    _i10.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? clearTillFirstAndShowView<T>(
    _i10.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
  @override
  _i13.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i10.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i13.Future<T?>?);
}
